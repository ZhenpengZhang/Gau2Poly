import json
import os
import sys
import load_gaussian

f = open('input.json') #加载读取json文件
data = json.load(f)
Title, Method, Basis, freqscale, Temperature = data["Title"], data["Method"], data["Basis"], data["freqscale"], data["Temperature"]

#先存为空字典
dictionary = {
    'REACT1': {},
    'REACT2': {},
    'RC': {},
    'START': {},
    'PROD1': {},
    'PROD2': {},
}
def update_dictionary(species):
    dictionary[species['type']] = {'name': species['name'], 'type': species['type'], 'Gemo': species['Gemo']}
# 遍历处理data中的所有species
for species in data['Species']:
    if species['type'] in dictionary:
        update_dictionary(species)
#json文件加载完毕


os.makedirs(Title, exist_ok=True) #创建polyrate输入文件目录，如果已经存在这个目录也不会报错

#判断用户是否提供了R1,TS文件,如果没提供就结束进程
if not dictionary['START'] or not dictionary['REACT1']:
    print("TS or React1 is not provided, please modify your input file.")
    sys.exit()
TS_coordinate = load_gaussian.extract_coordinates(dictionary['START']['name']+'.out')
TS_spin_Multi = load_gaussian.extract_charge_and_multiplicity(dictionary['START']['name']+'.out')
R1_coordinate = load_gaussian.extract_coordinates(dictionary['REACT1']['name']+'.out')
R1_spin_Multi = load_gaussian.extract_charge_and_multiplicity(dictionary['REACT1']['name']+'.out')
Index = load_gaussian.obtain_index(dictionary['START']['name']+'.gjf')
#写入General信息
with open(Title+'//'+Title+'.dat', 'w') as dat:
    dat.write('*General\n\n'' TITLE\n''Generated by Zhenpeng Zhang\n' '  END\n\n')
    dat.write(' ATOMS\n')
    for i, (elem, _) in enumerate(TS_coordinate, 1):
        dat.write(f"{i:>4}  {elem}\n")      #设置原子序号为右对齐
    dat.write('  END\n\n''  NOSUPERMOL\n\n''*OPTIMIZATION\n\n''  OPTMIN  OHOOK\n''  OPTTS   OHOOK\n\n''*SECOND\n\n''  HESSCAL HHOOK\n\n')
    dat.write('*REACT1\n\n'' INITGEO HOOKS\n\n')
    dat.write('GEOM\n')
    for i, (elem, _) in enumerate(R1_coordinate, 1):
        dat.write(f"{i:>4}  {elem}\n")      #设置原子序号为右对齐
    dat.write('  END\n\n')
#判断自旋多重度   Polyrate是先输入多重度，再输入电荷
    dat.write('  ELEC\n')
    dat.write(f"{R1_spin_Multi:>6} \n")
    dat.write('  END\n\n')
    dat.write("   SPECIES   " + dictionary['REACT1']['Gemo'])
    dat.write('\n\n''# end of react1 section''\n\n')
#判断用户是否提供了反应物2，如果没提供就写产物,注意这里原子序号要加上反应物1的序号
if dictionary['REACT2']:
    R2_coordinate = load_gaussian.extract_coordinates(dictionary['REACT2']['name'] + '.out')
    R2_spin_Multi = load_gaussian.extract_charge_and_multiplicity(dictionary['REACT2']['name'] + '.out')
    with open(Title + '//' + Title + '.dat', 'a') as dat:
        dat.write('*REACT2\n\n'' INITGEO HOOKS\n\n')
        dat.write('GEOM\n')
        for i, (elem, _) in enumerate(R2_coordinate, 1):
            dat.write(f"{i+len(R1_coordinate):>4}  {elem}\n")  # 设置原子序号为右对齐
        dat.write('  END\n\n')
        # 判断自旋多重度   Polyrate是先输入多重度，再输入电荷
        dat.write('  ELEC\n')
        dat.write(f"{R2_spin_Multi:>6} \n")
        dat.write('  END\n\n')
        dat.write("   SPECIES   " + dictionary['REACT2']['Gemo'])
        dat.write('\n\n''# end of react2 section''\n\n')
#判断用户是否提供了产物2，如果没提供即不需要判断过渡态原子被提取到产物1还是产物2去了。
if not dictionary['PROD2']:
    P1_coordinate = load_gaussian.extract_coordinates(dictionary['PROD1']['name'] + '.out')
    P1_spin_Multi = load_gaussian.extract_charge_and_multiplicity(dictionary['PROD1']['name'] + '.out')
    with open(Title + '//' + Title + '.dat', 'a') as dat:
        dat.write('*PROD1\n\n'' INITGEO HOOKS\n\n')
        dat.write('GEOM\n')
        for i, (elem, _) in enumerate(P1_coordinate, 1):
            dat.write(f"{i:>4}  {elem}\n")  # 设置原子序号为右对齐,只有一个产物的情况下，序号不需要变动
        dat.write('  END\n\n')
        # 判断自旋多重度   Polyrate是先输入多重度，再输入电荷
        dat.write('  ELEC\n')
        dat.write(f"{P1_spin_Multi:>6} \n")
        dat.write('  END\n\n')
        dat.write("   SPECIES   " + dictionary['PROD1']['Gemo'])
        dat.write('\n\n''# end of product1 section''\n\n')
#提供了两个产物，需要判断过度原子被提取到哪里去了，被提取原子序号应该小于其物质总原子数量。需要用户把产物1作为被提取的位点
index_transition = load_gaussian.obtain_transition_atom(dictionary['START']['name']+'.out')
if dictionary['PROD2']:
    P1_coordinate = load_gaussian.extract_coordinates(dictionary['PROD1']['name'] + '.out')
    P1_spin_Multi = load_gaussian.extract_charge_and_multiplicity(dictionary['PROD1']['name'] + '.out')
    with open(Title + '//' + Title + '.dat', 'a') as dat:
        dat.write('*PROD1\n\n'' INITGEO HOOKS\n\n')
        dat.write('GEOM\n')
        for i, (elem, _) in enumerate(P1_coordinate, 1):
            if i < index_transition:
                dat.write(f"{i:>4}  {elem}\n")
            else:
                dat.write(f"{i + 1:>4}  {elem}\n")  # 设置原子序号为右对齐,有两个产物的情况下，需要判断哪个原子被提取了
        dat.write('  END\n\n')
        # 判断自旋多重度   Polyrate是先输入多重度，再输入电荷
        dat.write('  ELEC\n')
        dat.write(f"{P1_spin_Multi:>6} \n")
        dat.write('  END\n\n')
        dat.write("   SPECIES   " + dictionary['PROD1']['Gemo'])
        dat.write('\n\n''# end of product1 section''\n\n')
    P2_coordinate = load_gaussian.extract_coordinates(dictionary['PROD2']['name'] + '.out')
    P2_spin_Multi = load_gaussian.extract_charge_and_multiplicity(dictionary['PROD2']['name'] + '.out')
    with open(Title + '//' + Title + '.dat', 'a') as dat:
        dat.write('*PROD2\n\n'' INITGEO HOOKS\n\n')
        dat.write('GEOM\n')
        for i, (elem, _) in enumerate(P2_coordinate, 1):
            if i == 1:
                dat.write(f"{index_transition:>4}  {elem}\n")
            else:
                dat.write(f"{i + len(R1_coordinate) - 1:>4}  {elem}\n")
        dat.write('  END\n\n')
        # 判断自旋多重度   Polyrate是先输入多重度，再输入电荷
        dat.write('  ELEC\n')
        dat.write(f"{P2_spin_Multi:>6} \n")
        dat.write('  END\n\n')
        dat.write("   SPECIES   " + dictionary['PROD2']['Gemo'])
        dat.write('\n\n''# end of product2 section''\n\n')
        # 写入过渡态信息
        dat.write('*START\n\n'' INITGEO HOOKS\n\n')
        dat.write('GEOM\n')
        for i, (elem, _) in enumerate(TS_coordinate, 1):
            dat.write(f"{i:>4}  {elem}\n")  # 设置原子序号为右对齐
        dat.write('  END\n\n')
        dat.write('  ELEC\n')
        dat.write(f"{TS_spin_Multi:>6} \n")
        dat.write('  END\n\n')
        dat.write("   SPECIES   " + dictionary['START']['Gemo'])
        dat.write('\n\n''# end of start section''\n\n')
        dat.write('*PATH\n\n''   SCALEMASS     1.000000\n''   SSTEP         0.002\n' '   INH           9\n''   NSTEPS        99999\n''   CURV          dgrad\n'  )
        dat.write('   RPM           pagem\n')
        dat.write('   FREQSCALE' + '     ' + freqscale + '\n')
        dat.write('   RODS\n\n''   SRANGE\n''      slp     1.0\n''      slm    -1.0\n')
        dat.write('  END\n\n')
        dat.write('   COORD       curv2\n\n')
        dat.write('  INTDEF\n')
        #写个INTDEF,并且每写五个就换一行
        for i, bond in enumerate(Index[0], start=1):
            dat.write(bond+' ')
            if i % 6 == 0:
                dat.write('\n')
        for i, angle in enumerate(Index[1], start=1):
            dat.write(angle+' ')
            if i % 6 == 0:
                dat.write('\n')
        for i,diher in enumerate(Index[2], start=1):
            dat.write(diher+' ')
            if i % 6 == 0:
                dat.write('\n')
        dat.write('  END\n\n')
        dat.write('  *TUNNEL\n\n''SCT\n\n''*RATE\n\n' ' SIGMAF\n'  ' BOTHK\n'' TST\n'' CVT\n\n')
        dat.write('  TEMP\n')
        for Tem in Temperature:
            dat.write(' '+str(Tem)+'.\n')
        dat.write('  END\n\n')
#产生71文件
if dictionary['REACT1']:
    with open(Title + '//' + Title + '.71', 'w') as file71:
        file71.write('%mem=10GB\n''%nproc=48\n''# opt scf(maxcycle=512,xqc) FCHK ' + str(Method) +' '+ str(Basis))
        file71.write('\n\n')
        file71.write('Generated by Zhenpeng Zhang')
        file71.write('\n\n')
        file71.write(' ' +R1_spin_Multi[-1]+' ' +R1_spin_Multi[0]) #Polyrate 和Gaussian对自旋多重度的顺序是反的
        file71.write('\n')
        for data in R1_coordinate:
            atom, coordinates = data
            file71.write(f'{atom.strip():>2} {coordinates[0]:12.6f} {coordinates[1]:14.6f} {coordinates[2]:16.6f}\n')
        file71.write('\n\n')
#产生72文件
if dictionary['REACT2']:
    with open(Title + '//' + Title + '.72', 'w') as file72:
        file72.write('%mem=10GB\n''%nproc=48\n''# opt scf(maxcycle=512,xqc) FCHK ' + str(Method) +' '+ str(Basis))
        file72.write('\n\n')
        file72.write('Generated by Zhenpeng Zhang')
        file72.write('\n\n')
        file72.write(' ' +R2_spin_Multi[-1]+' ' +R2_spin_Multi[0]) #Polyrate 和Gaussian对自旋多重度的顺序是反的
        file72.write('\n')
        for data in R2_coordinate:
            atom, coordinates = data
            file72.write(f'{atom.strip():>2} {coordinates[0]:12.6f} {coordinates[1]:14.6f} {coordinates[2]:16.6f}\n')
        file72.write('\n\n')
#产生73文件
if dictionary['PROD1']:
    with open(Title + '//' + Title + '.73', 'w') as file73:
        file73.write('%mem=10GB\n''%nproc=48\n''# opt scf(maxcycle=512,xqc) FCHK ' + str(Method) +' '+ str(Basis))
        file73.write('\n\n')
        file73.write('Generated by Zhenpeng Zhang')
        file73.write('\n\n')
        file73.write(' ' +P1_spin_Multi[-1]+' ' +P1_spin_Multi[0]) #Polyrate 和Gaussian对自旋多重度的顺序是反的
        file73.write('\n')
        for data in P1_coordinate:
            atom, coordinates = data
            file73.write(f'{atom.strip():>2} {coordinates[0]:12.6f} {coordinates[1]:14.6f} {coordinates[2]:16.6f}\n')
        file73.write('\n\n')
#产生74文件
if dictionary['PROD2']:
    with open(Title + '//' + Title + '.74', 'w') as file74:
        file74.write('%mem=10GB\n''%nproc=48\n''# opt scf(maxcycle=512,xqc) FCHK ' + str(Method) +' '+ str(Basis))
        file74.write('\n\n')
        file74.write('Generated by Zhenpeng Zhang')
        file74.write('\n\n')
        file74.write(' ' +P2_spin_Multi[-1]+' ' +P2_spin_Multi[0]) #Polyrate 和Gaussian对自旋多重度的顺序是反的
        file74.write('\n')
        for data in P2_coordinate:
            atom, coordinates = data
            file74.write(f'{atom.strip():>2} {coordinates[0]:12.6f} {coordinates[1]:14.6f} {coordinates[2]:16.6f}\n')
        file74.write('\n\n')
#产生75文件
if dictionary['START']:
    with open(Title + '//' + Title + '.75', 'w') as file75:
        file75.write('%mem=10GB\n''%nproc=48\n''%chk=guess.chk''# opt=(TS,noeigen,calcfc) scf(maxcycle=512,xqc) FCHK ' + str(Method) +' '+ str(Basis))
        file75.write('\n\n')
        file75.write('Generated by Zhenpeng Zhang')
        file75.write('\n\n')
        file75.write(' ' +TS_spin_Multi[-1]+' '+TS_spin_Multi[0]) #Polyrate 和Gaussian对自旋多重度的顺序是反的
        file75.write('\n')
        for data in TS_coordinate:
            atom, coordinates = data
            file75.write(f'{atom.strip():>2} {coordinates[0]:12.6f} {coordinates[1]:14.6f} {coordinates[2]:16.6f}\n')
        file75.write('\n\n')
#产生70文件
    with open(Title + '//' + Title + '.70', 'w') as file:
        file.write('*GRGENERAL\n')
        file.write('\n')
        file.write('  GRRESTART\n')
        file.write('\n')
        file.write('*GRCOMMON\n')
        file.write('\n')
        file.write('  GRENER\n')
        file.write('   %mem=10GB\n')
        file.write('   %nproc=48\n')
        file.write('   # ' + str(Method) +'/'+ str(Basis) + '\n')
        file.write('     UNITS=AU FCHK NOSYMM\n')
        file.write('  END\n')
        file.write('\n')
        file.write('  GRFIRST\n')
        file.write('   %mem=10GB\n')
        file.write('   %nproc=48\n')
        file.write('   # ' + str(Method) +'/'+ str(Basis) + '\n')
        file.write('     FORCE UNITS=AU FCHK NOSYMM\n')
        file.write('  END\n')
        file.write('\n')
        file.write('  GRSEC\n')
        file.write('   %mem=10GB\n')
        file.write('   %nproc=24\n')
        file.write('   # ' + str(Method) +'/'+ str(Basis) + '\n')
        file.write('     FREQ UNITS=AU FCHK NOSYMM\n')
        file.write('  END\n')
        file.write('\n')
        file.write('*GRPATH\n')
        file.write('\n')
        file.write('  GRENER\n')
        file.write('   %mem=10GB\n')
        file.write('   %chk=guess.chk\n')
        file.write('   %nproc=48\n')
        file.write('   # ' + str(Method) +'/'+ str(Basis) +'  guess=read' +'\n')
        file.write('     UNITS=AU FCHK NOSYMM\n')
        file.write('  END\n')
        file.write('\n')
        file.write('  GRFIRST\n')
        file.write('   %mem=10GB\n')
        file.write('   %chk=guess.chk\n')
        file.write('   %nproc=48\n')
        file.write('   # ' + str(Method) +'/'+ str(Basis) +'  guess=read' +'\n')
        file.write('     FORCE UNITS=AU FCHK NOSYMM\n')
        file.write('  END\n')
        file.write('\n')
        file.write('  GRSEC\n')
        file.write('   %mem=10GB\n')
        file.write('   %chk=guess.chk\n')
        file.write('   %nproc=48\n')
        file.write('   # ' + str(Method) +'/'+ str(Basis) +'  guess=read' +'\n')
        file.write('     FREQ UNITS=AU FCHK NOSYMM\n')
        file.write('  END\n')
#生产jc文件
    with open(Title + '//' + Title + '.jc', 'w') as file:
        file.write('#!/bin/csh -f\n''#\n''# Usage  [working_directory]\n''#\n')
        file.write('set name = ' + Title)
script = """
#
if ($#argv != 0) then
   set actdir = `pwd`
   set wrkdir = $argv[1]
else
   set actdir = `pwd`
   set wrkdir = $actdir/$name
check:
   if (-e $wrkdir) then
      set tmp = $wrkdir/$name
      set wrkdir = $tmp
      goto check
   endif
   mkdir $wrkdir
endif
#
cd $wrkdir
#
# Set the name of the executable
#
set polydir = `cat ~/.poly_path`
set exedir  = $polydir/exe
set exe     = $exedir/gaussrate.exe
#
# Delete the fu# files left previously if any
#
rm poly.fu* >& /dev/null
#
# Copy the data files to POLYRATE filenames. 
#
if (-e esp.fu81) then
/bin/rm esp.fu81
endif
if (-e shuttle) goto input
cp $exedir/shuttle $wrkdir/shuttle
input:
cp $actdir/$name.dat poly.fu5
cp $actdir/$name.70  esp.fu70 
cp $actdir/$name.71  esp.fu71 
cp $actdir/$name.72  esp.fu72 
cp $actdir/$name.73  esp.fu73 
cp $actdir/$name.74  esp.fu74 
cp $actdir/$name.75  esp.fu75 
cp $actdir/$name.76  esp.fu76 
cp $actdir/$name.77  esp.fu77
cp $actdir/$name.rst esp.fu83 
#
# Write sysem message to .time file
#
(time $exe) >& $actdir/$name.time
echo " " >> $actdir/$name.time
# 
# Copy the POLYRATE output files to appropriate filenames
#
rm poly.fu5 
rm poly.fu50
rm esp.fu70
mv poly.fu6  $actdir/$name.fu6
mv poly.fu15 $actdir/$name.fu15
mv esp.fu83  $actdir/$name.rst.old
mv esp.fu84  $actdir/$name.rst
mv esp.fu61  $actdir/$name.61 
#
if (-e $actdir/GRTEMPFILES) goto exist
mkdir $actdir/GRTEMPFILES
exist:
mv * $actdir/GRTEMPFILES
cd $actdir
rm -rf $wrkdir
#
# End of script
exit
"""

with open(Title + '//' + Title + '.jc', 'a') as file:
    file.write(script)
#生成slurm提交脚本
slurm = """
#!/bin/bash
#SBATCH --partition=shine
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=48
#SBATCH --error=%j.err
#SBATCH --output=%j.out
"""
with open(Title + '//' + Title + '.slm', 'a') as file:
    file.write(slurm)
    file.write('#SBATCH --job-name='+Title+'\n\n')
    file.write('chmod 777' + Title+'.jc\n')
    file.write('./'+ Title+'.jc\n')
    

